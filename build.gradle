plugins {
	alias(libs.plugins.quilt.loom)
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Curse"
		url = "https://www.cursemaven.com"
	}
	maven {
		name "lad snak"
		url "https://ladysnake.jfrog.io/artifactory/mods"
	}
	maven {
		name = "Nexus Repository Manager"
		url = 'https://oss.sonatype.org/content/repositories/snapshots'
	}
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven {
		url = "https://jitpack.io"
	}
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/snapshot'
	}
	maven {
		name "reach entity attributes"
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name = "Shedaniel's Maven"
		url = "https://maven.shedaniel.me/"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases"
		content {
			includeGroup 'com.terraformersmc'
			includeGroup 'dev.emi'
		}
	}
}

dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2")
	}
	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	modImplementation 'software.bernie.geckolib:geckolib-quilt-1.18:3.0.0'
	modImplementation "com.github.CrimsonDawn45:Fabric-Shield-Lib:v${project.fabric_shield_lib_version}"
	include "com.github.CrimsonDawn45:Fabric-Shield-Lib:v${project.fabric_shield_lib_version}"
	modImplementation("com.github.virtuoel:pehkui:${project.pehkui_version}")
	include ("com.github.virtuoel:pehkui:${project.pehkui_version}")
	include("com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}")
	modImplementation("com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}")
	include("com.github.Draylar.omega-config:omega-config-gui:${project.omega_config_version}")
	modImplementation("com.github.Draylar.omega-config:omega-config-gui:${project.omega_config_version}")
	modCompileOnly ("com.terraformersmc:modmenu:${project.modmenu_version}") { transitive = false }
	modRuntimeOnly ("com.terraformersmc:modmenu:${project.modmenu_version}") { transitive = false }
	modImplementation "io.github.ladysnake:satin:${project.satin_version}"
	include "io.github.ladysnake:satin:${project.satin_version}"
	// Adds a dependency on the base cardinal components module (required by every other module)
	// Replace modImplementation with modApi if you expose components in your own API
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}"
	// Adds a dependency on a specific module
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}"
	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}"

	modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}"
	include "com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}"
	modImplementation ("curse.maven:connectiblechains-415681:${project.chains_version}")
}
configurations.all {
	resolutionStrategy.dependencySubstitution {
		substitute module('net.fabricmc:fabric-loader') using module(libs.quilt.loader.get().toString())
		all { DependencySubstitution dependency ->
			if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.group == 'net.fabricmc.fabric-api') {
				if (dependency.requested.module == 'fabric-api')
					dependency.useTarget libs.quilted.fabric.api.get().toString()
				else
					dependency.useTarget 'org.quiltmc.quilted-fabric-api' + ':' + dependency.requested.module + ':' + libs.versions.quilted.fabric.api.get()
			}
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/tot.accesswidener")
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
